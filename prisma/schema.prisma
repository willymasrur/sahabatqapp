// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // provider = "mysql"
    url      = env("DATABASE_URL")
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}
model TestCategory {
    testCategoryId  Int @id @default(autoincrement())
    testCategoryName String
    testCategoryDescription String
    testCategoryImage String
    test      Test[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model Test{
    testId Int @id @default(autoincrement())
    testName String
    testDescription String
    testTestCategoryId Int
    testQuestionsAnswer Json @db.Json
    testImage String
    testDuration Int
    testFinishMessage String
    testPrice Int
    testStatus Int @db.SmallInt
    testIsForChild Boolean
    testCategory    TestCategory @relation(fields: [testTestCategoryId], references: [testCategoryId], onDelete: Cascade)
    testAttempt      TestAttempt[]
    testResult    TestResult[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TestAttempt{
    testAttemptId Int @id @default(autoincrement())
    testAttemptTestId Int
    testAttemptTestResultId Int
    // testAttemptUserId string karena next auth
    testAttemptUserId String
    testAttemptUserChildId Int?
    testAttemptOrder Int
    testAttemptScore Int
    testAttemptStatus Int @db.SmallInt
    test    Test @relation(fields: [testAttemptTestId], references: [testId], onDelete: Cascade)
    testResult    TestResult @relation(fields: [testAttemptTestResultId], references: [testResultId], onDelete: Cascade)
    user    User @relation(fields: [testAttemptUserId], references: [id], onDelete: Cascade)
    userChild    UserChild? @relation(fields: [testAttemptUserChildId], references: [UserChildId])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model TestResult{
    testResultId Int @id @default(autoincrement())
    testResultTestId Int
    testResultMin Int
    testResultMax Int
    testResultResult String
    testResultMessage String 
    testResultStatus Int @db.SmallInt
    test    Test @relation(fields: [testResultTestId], references: [testId], onDelete: Cascade)
    testAttempt TestAttempt[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model UserChild{
    UserChildId Int @id @default(autoincrement())
    UserChildUserId String
    UserChildFullName String
    UserChildAge Int
    UserChildStatus Int @db.SmallInt
    user    User @relation(fields: [UserChildUserId], references: [id], onDelete: Cascade)
    testAttempt TestAttempt[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phoneNumber   String?
    accounts      Account[]
    sessions      Session[]
    testAttempt      TestAttempt[]
    userChild      UserChild[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
